// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services.proto

/*
Package services is a generated protocol buffer package.

It is generated from these files:
	services.proto

It has these top-level messages:
	BuildRequest
	BuildResponse
	PostDeployRequest
	PostDeployResponse
	SecretRequest
	SecretResponse
*/
package services

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildRequest struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BuildRequest) Reset()                    { *m = BuildRequest{} }
func (m *BuildRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildRequest) ProtoMessage()               {}
func (*BuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BuildRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type BuildResponse struct {
	Artifacts []byte `protobuf:"bytes,1,opt,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (m *BuildResponse) Reset()                    { *m = BuildResponse{} }
func (m *BuildResponse) String() string            { return proto.CompactTextString(m) }
func (*BuildResponse) ProtoMessage()               {}
func (*BuildResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BuildResponse) GetArtifacts() []byte {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

type PostDeployRequest struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *PostDeployRequest) Reset()                    { *m = PostDeployRequest{} }
func (m *PostDeployRequest) String() string            { return proto.CompactTextString(m) }
func (*PostDeployRequest) ProtoMessage()               {}
func (*PostDeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PostDeployRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type PostDeployResponse struct {
}

func (m *PostDeployResponse) Reset()                    { *m = PostDeployResponse{} }
func (m *PostDeployResponse) String() string            { return proto.CompactTextString(m) }
func (*PostDeployResponse) ProtoMessage()               {}
func (*PostDeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SecretRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SecretRequest) Reset()                    { *m = SecretRequest{} }
func (m *SecretRequest) String() string            { return proto.CompactTextString(m) }
func (*SecretRequest) ProtoMessage()               {}
func (*SecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SecretRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SecretResponse struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Exists bool   `protobuf:"varint,2,opt,name=exists" json:"exists,omitempty"`
}

func (m *SecretResponse) Reset()                    { *m = SecretResponse{} }
func (m *SecretResponse) String() string            { return proto.CompactTextString(m) }
func (*SecretResponse) ProtoMessage()               {}
func (*SecretResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SecretResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SecretResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func init() {
	proto.RegisterType((*BuildRequest)(nil), "BuildRequest")
	proto.RegisterType((*BuildResponse)(nil), "BuildResponse")
	proto.RegisterType((*PostDeployRequest)(nil), "PostDeployRequest")
	proto.RegisterType((*PostDeployResponse)(nil), "PostDeployResponse")
	proto.RegisterType((*SecretRequest)(nil), "SecretRequest")
	proto.RegisterType((*SecretResponse)(nil), "SecretResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceBuilder service

type ServiceBuilderClient interface {
	ServiceBuild(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (ServiceBuilder_ServiceBuildClient, error)
}

type serviceBuilderClient struct {
	cc *grpc.ClientConn
}

func NewServiceBuilderClient(cc *grpc.ClientConn) ServiceBuilderClient {
	return &serviceBuilderClient{cc}
}

func (c *serviceBuilderClient) ServiceBuild(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (ServiceBuilder_ServiceBuildClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServiceBuilder_serviceDesc.Streams[0], c.cc, "/ServiceBuilder/ServiceBuild", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceBuilderServiceBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceBuilder_ServiceBuildClient interface {
	Recv() (*BuildResponse, error)
	grpc.ClientStream
}

type serviceBuilderServiceBuildClient struct {
	grpc.ClientStream
}

func (x *serviceBuilderServiceBuildClient) Recv() (*BuildResponse, error) {
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ServiceBuilder service

type ServiceBuilderServer interface {
	ServiceBuild(*BuildRequest, ServiceBuilder_ServiceBuildServer) error
}

func RegisterServiceBuilderServer(s *grpc.Server, srv ServiceBuilderServer) {
	s.RegisterService(&_ServiceBuilder_serviceDesc, srv)
}

func _ServiceBuilder_ServiceBuild_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceBuilderServer).ServiceBuild(m, &serviceBuilderServiceBuildServer{stream})
}

type ServiceBuilder_ServiceBuildServer interface {
	Send(*BuildResponse) error
	grpc.ServerStream
}

type serviceBuilderServiceBuildServer struct {
	grpc.ServerStream
}

func (x *serviceBuilderServiceBuildServer) Send(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ServiceBuilder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceBuilder",
	HandlerType: (*ServiceBuilderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServiceBuild",
			Handler:       _ServiceBuilder_ServiceBuild_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

// Client API for PostDeploy service

type PostDeployClient interface {
	Run(ctx context.Context, in *PostDeployRequest, opts ...grpc.CallOption) (*PostDeployResponse, error)
}

type postDeployClient struct {
	cc *grpc.ClientConn
}

func NewPostDeployClient(cc *grpc.ClientConn) PostDeployClient {
	return &postDeployClient{cc}
}

func (c *postDeployClient) Run(ctx context.Context, in *PostDeployRequest, opts ...grpc.CallOption) (*PostDeployResponse, error) {
	out := new(PostDeployResponse)
	err := grpc.Invoke(ctx, "/PostDeploy/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostDeploy service

type PostDeployServer interface {
	Run(context.Context, *PostDeployRequest) (*PostDeployResponse, error)
}

func RegisterPostDeployServer(s *grpc.Server, srv PostDeployServer) {
	s.RegisterService(&_PostDeploy_serviceDesc, srv)
}

func _PostDeploy_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostDeployServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PostDeploy/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostDeployServer).Run(ctx, req.(*PostDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostDeploy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PostDeploy",
	HandlerType: (*PostDeployServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _PostDeploy_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// Client API for Secret service

type SecretClient interface {
	Get(ctx context.Context, in *SecretRequest, opts ...grpc.CallOption) (*SecretResponse, error)
}

type secretClient struct {
	cc *grpc.ClientConn
}

func NewSecretClient(cc *grpc.ClientConn) SecretClient {
	return &secretClient{cc}
}

func (c *secretClient) Get(ctx context.Context, in *SecretRequest, opts ...grpc.CallOption) (*SecretResponse, error) {
	out := new(SecretResponse)
	err := grpc.Invoke(ctx, "/Secret/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Secret service

type SecretServer interface {
	Get(context.Context, *SecretRequest) (*SecretResponse, error)
}

func RegisterSecretServer(s *grpc.Server, srv SecretServer) {
	s.RegisterService(&_Secret_serviceDesc, srv)
}

func _Secret_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Secret/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).Get(ctx, req.(*SecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Secret_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Secret",
	HandlerType: (*SecretServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Secret_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

func init() { proto.RegisterFile("services.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x13, 0x53, 0x82, 0x1d, 0x92, 0xa8, 0xa3, 0x48, 0x09, 0x1e, 0xc2, 0x8a, 0x90, 0x8b,
	0x4b, 0x8d, 0x57, 0xf1, 0xa0, 0x82, 0x57, 0x89, 0xbf, 0x20, 0xa6, 0xa3, 0x04, 0xda, 0x6c, 0xdc,
	0xd9, 0x88, 0xfe, 0x7b, 0xe9, 0x76, 0x4b, 0x13, 0xb4, 0xb7, 0xb7, 0xc3, 0x7b, 0x8f, 0xf9, 0x66,
	0x21, 0x61, 0xd2, 0x5f, 0x4d, 0x4d, 0x2c, 0x3b, 0xad, 0x8c, 0x12, 0x19, 0x44, 0x0f, 0x7d, 0xb3,
	0x5c, 0x94, 0xf4, 0xd9, 0x13, 0x1b, 0x3c, 0x86, 0x60, 0xc5, 0x1f, 0x33, 0x3f, 0xf3, 0xf3, 0xa8,
	0x5c, 0x4b, 0x71, 0x0d, 0xb1, 0x73, 0x70, 0xa7, 0x5a, 0x26, 0xbc, 0x80, 0x69, 0xa5, 0x4d, 0xf3,
	0x5e, 0xd5, 0x86, 0x9d, 0x71, 0x37, 0x10, 0x57, 0x70, 0xf2, 0xa2, 0xd8, 0x3c, 0x51, 0xb7, 0x54,
	0x3f, 0xfb, 0x5b, 0xcf, 0x00, 0x87, 0xb6, 0x4d, 0xb5, 0xb8, 0x84, 0xf8, 0x95, 0x6a, 0x4d, 0x66,
	0x1b, 0x44, 0x98, 0xb4, 0xd5, 0x8a, 0x6c, 0x72, 0x5a, 0x5a, 0x2d, 0xee, 0x20, 0xd9, 0x9a, 0xdc,
	0x46, 0x08, 0x93, 0x45, 0x65, 0x2a, 0xd7, 0x6f, 0x35, 0x9e, 0x43, 0x48, 0xdf, 0x0d, 0x1b, 0x9e,
	0x1d, 0x64, 0x7e, 0x7e, 0x58, 0xba, 0x57, 0xf1, 0xb8, 0x4e, 0xdb, 0x13, 0x58, 0x2a, 0xd2, 0x78,
	0x03, 0xd1, 0x70, 0x82, 0xb1, 0x1c, 0x5e, 0x24, 0x4d, 0xe4, 0x08, 0x5f, 0x78, 0x73, 0xbf, 0xb8,
	0x07, 0xd8, 0x6d, 0x8f, 0x73, 0x08, 0xca, 0xbe, 0x45, 0x94, 0x7f, 0xc0, 0xd3, 0x53, 0xf9, 0x0f,
	0xa5, 0x57, 0x14, 0x10, 0x6e, 0x10, 0x30, 0x87, 0xe0, 0x99, 0x0c, 0x26, 0x72, 0xc4, 0x9d, 0x1e,
	0xc9, 0x31, 0xa2, 0xf0, 0xde, 0x42, 0xfb, 0x61, 0xb7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae,
	0x6d, 0xaa, 0x01, 0xc2, 0x01, 0x00, 0x00,
}
